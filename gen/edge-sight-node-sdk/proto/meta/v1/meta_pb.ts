// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/meta/v1/meta.proto (package meta.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message meta.v1.GetBedsRequest
 */
export class GetBedsRequest extends Message<GetBedsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 pageSize = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: int32 deptId = 3;
   */
  deptId = 0;

  constructor(data?: PartialMessage<GetBedsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetBedsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "deptId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBedsRequest {
    return new GetBedsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBedsRequest {
    return new GetBedsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBedsRequest {
    return new GetBedsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBedsRequest | PlainMessage<GetBedsRequest> | undefined, b: GetBedsRequest | PlainMessage<GetBedsRequest> | undefined): boolean {
    return proto3.util.equals(GetBedsRequest, a, b);
  }
}

/**
 * @generated from message meta.v1.GetBedsResponse
 */
export class GetBedsResponse extends Message<GetBedsResponse> {
  /**
   * @generated from field: repeated meta.v1.BedDetail beds = 1;
   */
  beds: BedDetail[] = [];

  constructor(data?: PartialMessage<GetBedsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetBedsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "beds", kind: "message", T: BedDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBedsResponse {
    return new GetBedsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBedsResponse {
    return new GetBedsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBedsResponse {
    return new GetBedsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBedsResponse | PlainMessage<GetBedsResponse> | undefined, b: GetBedsResponse | PlainMessage<GetBedsResponse> | undefined): boolean {
    return proto3.util.equals(GetBedsResponse, a, b);
  }
}

/**
 * @generated from message meta.v1.BedDetail
 */
export class BedDetail extends Message<BedDetail> {
  /**
   * @generated from field: int32 bedId = 1;
   */
  bedId = 0;

  /**
   * @generated from field: string bedNo = 2;
   */
  bedNo = "";

  /**
   * @generated from field: string patientName = 3;
   */
  patientName = "";

  /**
   * @generated from field: string patientGender = 4;
   */
  patientGender = "";

  /**
   * @generated from field: int32 patientAge = 5;
   */
  patientAge = 0;

  /**
   * @generated from field: string disease = 6;
   */
  disease = "";

  /**
   * @generated from field: string status = 7;
   */
  status = "";

  constructor(data?: PartialMessage<BedDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.BedDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bedId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "bedNo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "patientName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "patientGender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "patientAge", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "disease", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BedDetail {
    return new BedDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BedDetail {
    return new BedDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BedDetail {
    return new BedDetail().fromJsonString(jsonString, options);
  }

  static equals(a: BedDetail | PlainMessage<BedDetail> | undefined, b: BedDetail | PlainMessage<BedDetail> | undefined): boolean {
    return proto3.util.equals(BedDetail, a, b);
  }
}

/**
 * @generated from message meta.v1.GetAlertsRequest
 */
export class GetAlertsRequest extends Message<GetAlertsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 pageSize = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: int32 deptId = 3;
   */
  deptId = 0;

  constructor(data?: PartialMessage<GetAlertsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetAlertsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "deptId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertsRequest {
    return new GetAlertsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertsRequest {
    return new GetAlertsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertsRequest {
    return new GetAlertsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertsRequest | PlainMessage<GetAlertsRequest> | undefined, b: GetAlertsRequest | PlainMessage<GetAlertsRequest> | undefined): boolean {
    return proto3.util.equals(GetAlertsRequest, a, b);
  }
}

/**
 * @generated from message meta.v1.GetAlertsResponse
 */
export class GetAlertsResponse extends Message<GetAlertsResponse> {
  /**
   * @generated from field: repeated meta.v1.AlertDetail alerts = 1;
   */
  alerts: AlertDetail[] = [];

  constructor(data?: PartialMessage<GetAlertsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetAlertsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alerts", kind: "message", T: AlertDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertsResponse {
    return new GetAlertsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertsResponse {
    return new GetAlertsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertsResponse {
    return new GetAlertsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertsResponse | PlainMessage<GetAlertsResponse> | undefined, b: GetAlertsResponse | PlainMessage<GetAlertsResponse> | undefined): boolean {
    return proto3.util.equals(GetAlertsResponse, a, b);
  }
}

/**
 * @generated from message meta.v1.AlertDetail
 */
export class AlertDetail extends Message<AlertDetail> {
  /**
   * @generated from field: int32 alertId = 1;
   */
  alertId = 0;

  /**
   * @generated from field: string bedNo = 2;
   */
  bedNo = "";

  /**
   * @generated from field: string alertType = 3;
   */
  alertType = "";

  /**
   * @generated from field: string alertTime = 4;
   */
  alertTime = "";

  constructor(data?: PartialMessage<AlertDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.AlertDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "bedNo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "alertType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "alertTime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertDetail {
    return new AlertDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertDetail {
    return new AlertDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertDetail {
    return new AlertDetail().fromJsonString(jsonString, options);
  }

  static equals(a: AlertDetail | PlainMessage<AlertDetail> | undefined, b: AlertDetail | PlainMessage<AlertDetail> | undefined): boolean {
    return proto3.util.equals(AlertDetail, a, b);
  }
}

/**
 * @generated from message meta.v1.GetInfusionDevicesRequest
 */
export class GetInfusionDevicesRequest extends Message<GetInfusionDevicesRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 pageSize = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: int32 deptId = 3;
   */
  deptId = 0;

  constructor(data?: PartialMessage<GetInfusionDevicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetInfusionDevicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "deptId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInfusionDevicesRequest {
    return new GetInfusionDevicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInfusionDevicesRequest {
    return new GetInfusionDevicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInfusionDevicesRequest {
    return new GetInfusionDevicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInfusionDevicesRequest | PlainMessage<GetInfusionDevicesRequest> | undefined, b: GetInfusionDevicesRequest | PlainMessage<GetInfusionDevicesRequest> | undefined): boolean {
    return proto3.util.equals(GetInfusionDevicesRequest, a, b);
  }
}

/**
 * @generated from message meta.v1.GetInfusionDevicesResponse
 */
export class GetInfusionDevicesResponse extends Message<GetInfusionDevicesResponse> {
  /**
   * @generated from field: repeated meta.v1.InfusionDeviceDetail infusionDevices = 1;
   */
  infusionDevices: InfusionDeviceDetail[] = [];

  constructor(data?: PartialMessage<GetInfusionDevicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetInfusionDevicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "infusionDevices", kind: "message", T: InfusionDeviceDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInfusionDevicesResponse {
    return new GetInfusionDevicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInfusionDevicesResponse {
    return new GetInfusionDevicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInfusionDevicesResponse {
    return new GetInfusionDevicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInfusionDevicesResponse | PlainMessage<GetInfusionDevicesResponse> | undefined, b: GetInfusionDevicesResponse | PlainMessage<GetInfusionDevicesResponse> | undefined): boolean {
    return proto3.util.equals(GetInfusionDevicesResponse, a, b);
  }
}

/**
 * @generated from message meta.v1.InfusionDeviceDetail
 */
export class InfusionDeviceDetail extends Message<InfusionDeviceDetail> {
  /**
   * @generated from field: string bedNo = 1;
   */
  bedNo = "";

  /**
   * @generated from field: repeated meta.v1.DrugDetail drugs = 2;
   */
  drugs: DrugDetail[] = [];

  /**
   * @generated from field: string disease = 3;
   */
  disease = "";

  /**
   * @generated from field: string infusionTime = 4;
   */
  infusionTime = "";

  /**
   * @generated from field: string infusionStatus = 5;
   */
  infusionStatus = "";

  constructor(data?: PartialMessage<InfusionDeviceDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.InfusionDeviceDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bedNo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "drugs", kind: "message", T: DrugDetail, repeated: true },
    { no: 3, name: "disease", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "infusionTime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "infusionStatus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfusionDeviceDetail {
    return new InfusionDeviceDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfusionDeviceDetail {
    return new InfusionDeviceDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfusionDeviceDetail {
    return new InfusionDeviceDetail().fromJsonString(jsonString, options);
  }

  static equals(a: InfusionDeviceDetail | PlainMessage<InfusionDeviceDetail> | undefined, b: InfusionDeviceDetail | PlainMessage<InfusionDeviceDetail> | undefined): boolean {
    return proto3.util.equals(InfusionDeviceDetail, a, b);
  }
}

/**
 * @generated from message meta.v1.DrugDetail
 */
export class DrugDetail extends Message<DrugDetail> {
  /**
   * @generated from field: int32 drugId = 1;
   */
  drugId = 0;

  /**
   * @generated from field: string drugName = 2;
   */
  drugName = "";

  constructor(data?: PartialMessage<DrugDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.DrugDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drugId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "drugName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DrugDetail {
    return new DrugDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DrugDetail {
    return new DrugDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DrugDetail {
    return new DrugDetail().fromJsonString(jsonString, options);
  }

  static equals(a: DrugDetail | PlainMessage<DrugDetail> | undefined, b: DrugDetail | PlainMessage<DrugDetail> | undefined): boolean {
    return proto3.util.equals(DrugDetail, a, b);
  }
}

/**
 * @generated from message meta.v1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: int32 userId = 1;
   */
  userId = 0;

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message meta.v1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: meta.v1.UserDetail user = 1;
   */
  user?: UserDetail;

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserDetail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message meta.v1.UserDetail
 */
export class UserDetail extends Message<UserDetail> {
  /**
   * @generated from field: int32 userId = 1;
   */
  userId = 0;

  /**
   * @generated from field: string userName = 2;
   */
  userName = "";

  /**
   * @generated from field: string userRole = 3;
   */
  userRole = "";

  constructor(data?: PartialMessage<UserDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "meta.v1.UserDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "userName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "userRole", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDetail {
    return new UserDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDetail {
    return new UserDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDetail {
    return new UserDetail().fromJsonString(jsonString, options);
  }

  static equals(a: UserDetail | PlainMessage<UserDetail> | undefined, b: UserDetail | PlainMessage<UserDetail> | undefined): boolean {
    return proto3.util.equals(UserDetail, a, b);
  }
}

