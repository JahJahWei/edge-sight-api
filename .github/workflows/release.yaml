name: Release Private SDKs

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write

jobs:
  generate-and-publish-meta-sdk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout API Repo
        uses: actions/checkout@v4

      - name: Extract Version
        id: version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Install Buf
        run: |
          echo "Installing Buf"
          curl -sSL https://github.com/bufbuild/buf/releases/latest/download/buf-$(uname -s)-$(uname -m) -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
      
      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
      
      - name: Generate Meta SDK
        run: |
          echo "Generating Meta SDK"
          cd meta
          buf generate

      - name: Push Meta Java SDK
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          echo "Pushing Meta Java SDK"
          
          # Define variables
          VERSION=${{ steps.version.outputs.version }}
          REPO_NAME="meta-api-sdk-java"
          REPO_URL="https://x-access-token:${GH_TOKEN}@github.com/JahJahWei/${REPO_NAME}.git"
          SOURCE_DIR="meta/gen/${REPO_NAME}"
          
          # Clone the repository
          echo "Cloning ${REPO_NAME} repository..."
          git clone "${REPO_URL}"
          cd "${REPO_NAME}"
          
          # Configure git
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Clean existing generated files (optional, for clean state)
          echo "Cleaning existing generated files..."
          rm -rf src/main/java/* 2>/dev/null || true
          
          # Copy generated files
          echo "Copying generated files from ${SOURCE_DIR}..."
          if [ -d "../${SOURCE_DIR}" ]; then
            cp -r "../${SOURCE_DIR}"/* src/main/java/
          else
            echo "Error: Source directory ../${SOURCE_DIR} not found!"
            exit 1
          fi

          git add .

          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git commit -m "Sync Meta API Java SDK v$VERSION" || echo "No changes"
          else
            git commit -m "Initial commit: Sync Meta API Java SDK v$VERSION"
          fi

          git tag v$VERSION || echo "tag exists"

          if ! git show-ref --verify --quiet refs/remotes/origin/master; then
            git push origin HEAD:master --tags
          else
            git push origin master --tags
          fi

          # Set environment variables for Maven authentication
          export GH_TOKEN=${{ secrets.GH_TOKEN }}
          export GITHUB_ACTOR=${{ github.actor }}

          # Deploy to Maven repository
          echo "Deploying to Maven repository..."
          mvn clean deploy -DskipTests -s settings.xml
      
      - name: Push Meta Go SDK
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          echo "Pushing Meta Go SDK"

          VERSION=${{ steps.version.outputs.version }}
          REPO_NAME="meta-api-sdk-go"
          REPO_URL="https://x-access-token:${GH_TOKEN}@github.com/JahJahWei/${REPO_NAME}.git"
          SOURCE_DIR="meta/gen/${REPO_NAME}"

          # Clone the repository
          echo "Cloning ${REPO_NAME} repository..."
          git clone "${REPO_URL}"
          cd "${REPO_NAME}"

          git config user.name github-actions
          git config user.email github-actions@github.com

          # Clean existing generated files (optional, for clean state)
          echo "Cleaning existing generated files..."
          rm -rf github.com/JahJahWei/meta-api-sdk-go/v1/* 2>/dev/null || true
          
          # Copy generated files
          echo "Copying generated files from ${SOURCE_DIR}..."
          if [ -d "../${SOURCE_DIR}" ]; then
            cp -r "../${SOURCE_DIR}"/* github.com/JahJahWei/meta-api-sdk-go/v1/
          else
            echo "Error: Source directory ../${SOURCE_DIR} not found!"
            exit 1
          fi

          git add .

          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git commit -m "Sync Meta API Go SDK v$VERSION" || echo "No changes"
          else
            git commit -m "Initial commit: Sync Meta API Go SDK v$VERSION"
          fi

          git tag v$VERSION || echo "tag exists"

          if ! git show-ref --verify --quiet refs/remotes/origin/master; then
            git push origin HEAD:master --tags
          else
            git push origin master --tags
          fi

          # Set up Go module for publishing
          go mod tidy
          
          # Create a release for GitHub Packages
          gh release create v$VERSION --generate-notes --repo JahJahWei/meta-api-sdk-go || echo "Release already exists"
      
  
  generate-and-publish-alert-sdk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout API Repo
        uses: actions/checkout@v4

      - name: Extract Version
        id: version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Install Buf
        run: |
          echo "Installing Buf"
          curl -sSL https://github.com/bufbuild/buf/releases/latest/download/buf-$(uname -s)-$(uname -m) -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://npm.pkg.github.com"
      
      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Generate Alert SDK
        run: |
          echo "Generating Alert SDK"
          cd alert
          buf generate

      - name: Push Alert API Node.js SDK
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Pushing Alert API Node.js SDK"
          VERSION=${{ steps.version.outputs.version }}
          git clone https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/JahJahWei/alert-api-sdk-node.git

          cp -r gen/alert-api-sdk-node/* alert-api-sdk-node/
          cd alert-api-sdk-node
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Create package.json if it doesn't exist
          if [ ! -f package.json ]; then
            echo '{"name":"@jahjahwei/alert-api-sdk","version":"'$VERSION'","description":"Node.js SDK for Alert API","main":"index.js","types":"index.d.ts","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["grpc","protobuf","api","sdk","alert"],"author":"JahJahWei","license":"MIT","dependencies":{"@grpc/grpc-js":"^1.9.0","@grpc/proto-loader":"^0.7.0","google-protobuf":"^3.21.0"},"devDependencies":{"@types/node":"^18.0.0"},"repository":{"type":"git","url":"git+https://github.com/JahJahWei/alert-api-sdk-node.git"},"bugs":{"url":"https://github.com/JahJahWei/alert-api-sdk-node/issues"},"homepage":"https://github.com/JahJahWei/alert-api-sdk-node#readme"}' > package.json
          fi

          # Update version in package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json

          git add .

          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git commit -m "Sync Alert API Node.js SDK v$VERSION" || echo "No changes"
          else
            git commit -m "Initial commit: Sync Alert API Node.js SDK v$VERSION"
          fi

          git tag v$VERSION || echo "tag exists"

          if ! git show-ref --verify --quiet refs/remotes/origin/master; then
            git push origin HEAD:master --tags
          else
            git push origin master --tags
          fi

          # Publish to GitHub Packages (npm)
          npm publish

      - name: Push Alert API Go SDK
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          echo "Pushing Alert API Go SDK"
          VERSION=${{ steps.version.outputs.version }}
          git clone https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/JahJahWei/alert-api-sdk-go.git

          cp -r gen/alert-api-sdk-go/* alert-api-sdk-go/
          cd alert-api-sdk-go
          git config user.name github-actions
          git config user.email github-actions@github.com

          git add .

          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git commit -m "Sync Alert API Go SDK v$VERSION" || echo "No changes"
          else
            git commit -m "Initial commit: Sync Alert API Go SDK v$VERSION"
          fi

          git tag v$VERSION || echo "tag exists"

          if ! git show-ref --verify --quiet refs/remotes/origin/master; then
            git push origin HEAD:master --tags
          else
            git push origin master --tags
          fi

          # Set up Go module for publishing
          go mod tidy

          # Create a release for GitHub Packages
          gh release create v$VERSION --generate-notes --repo JahJahWei/alert-api-sdk-go || echo "Release already exists"

